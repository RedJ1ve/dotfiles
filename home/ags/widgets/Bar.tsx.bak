import { Variable, GLib, bind } from "astal";
import { Astal, Gtk, Gdk } from "astal/gtk3";
import Hyprland from "gi://AstalHyprland";
import Battery from "gi://AstalBattery";

function Workspaces() {
    const hypr = Hyprland.get_default();


    return (
        <box className="Workspaces" vpack="center" spacing={4}>
            {bind(hypr, "workspaces").as(ws => {
                const maxId = Math.max(...ws.map(w => w.id), 0);
                return Array.from({ length: maxId }, (_, i) => i + 1).map(id => {
                    const workspace = ws.find(w => w.id === id) || { windows: 0 };
                    return (
                        <button
                    		className={bind(hypr, "focusedWorkspace").as(fw =>
                        		ws === fw ? "focused" : "")}
                    		onClicked={() => ws.focus()}>
                    		{ws.id}
                	</button>
                    );
                });
            })}
        </box>
    );
}

function BatteryLevel() {
    const bat = Battery.get_default()

    return <box className="Battery"
        visible={bind(bat, "isPresent")}>
        <icon icon={bind(bat, "batteryIconName")} />
        <label label={bind(bat, "percentage").as(p =>
            `${Math.floor(p * 100)} %`
        )} />
    </box>
}

function Clock({ format = "%H:%M" }) {
    const time = Variable<string>("").poll(1000, () =>
        GLib.DateTime.new_now_local().format(format)!)

    return <label
        className="Time"
        onDestroy={() => time.drop()}
        label={time()}
    />
}

export default function Bar(monitor: Gdk.Monitor) {
    const { TOP, LEFT, RIGHT } = Astal.WindowAnchor

    return <window
        className="Bar"
        gdkmonitor={monitor}
        exclusivity={Astal.Exclusivity.EXCLUSIVE}
        anchor={TOP | LEFT | RIGHT}>
        <centerbox>
            <box hexpand halign={Gtk.Align.START}>
                <Clock />
            </box>
            <box>
                <Workspaces />
            </box>
            <box hexpand halign={Gtk.Align.END} >
                <BatteryLevel />
            </box>
        </centerbox>
    </window>
}

